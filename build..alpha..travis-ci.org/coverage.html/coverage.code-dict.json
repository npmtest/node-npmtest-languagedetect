{"/home/travis/build/npmtest/node-npmtest-languagedetect/test.js":"/* istanbul instrument in package npmtest_languagedetect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-languagedetect/lib.npmtest_languagedetect.js":"/* istanbul instrument in package npmtest_languagedetect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_languagedetect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_languagedetect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-languagedetect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-languagedetect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_languagedetect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_languagedetect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_languagedetect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_languagedetect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_languagedetect.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_languagedetect.__dirname +\n                    '/lib.npmtest_languagedetect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-languagedetect/node_modules/languagedetect/index.js":"module.exports = require('./lib/LanguageDetect');","/home/travis/build/npmtest/node-npmtest-languagedetect/node_modules/languagedetect/lib/LanguageDetect.js":"/**\n *\n * Detects the language of a given piece of text.\n *\n * Attempts to detect the language of a sample of text by correlating ranked\n * 3-gram frequencies to a table of 3-gram frequencies of known languages.\n *\n * Implements a version of a technique originally proposed by Cavnar & Trenkle\n * (1994): \"N-Gram-Based Text Categorization\"\n *\n * Largely inspired from the PHP Pear Package Text_LanguageDetect by Nicholas Pisarro\n * Licence: http://www.debian.org/misc/bsd.license BSD\n *\n * @author Francois-Guillaume Ribreau - @FGRibreau\n * @author Ruslan Zavackiy - @Chaoser\n *\n * @see https://github.com/FGRibreau/node-language-detect\n *\n * Installation:\n *  npm install LanguageDetect\n *\n * @example\n * <code>\n * var LanguageDetect = require(\"../LanguageDetect\");\n * var d = new LanguageDetect().detect('This is a test');\n * // d[0] == 'english'\n * // d[1] == 0.5969230769230769\n * // Good score are over 0.3\n * </code>\n */\n\nvar dbLang = require('../data/lang.json')\n  , Parser = require('./Parser')\n  , ISO639 = require('./ISO639');\n\nvar LanguageDetect = module.exports = function (languageType) {\n\n  /**\n   * The trigram data for comparison\n   *\n   * Will be loaded on start from $this->_db_filename\n   *\n   * May be set to a PEAR_Error object if there is an error during its\n   * initialization\n   *\n   * @var      array\n   * @access   private\n   */\n  this.langDb = {};\n\n  /**\n   * The size of the trigram data arrays\n   *\n   * @var     int\n   * @access  private\n   */\n  this.threshold = 300;\n\n  this.useUnicodeNarrowing = true;\n\n  /**\n   * Constructor\n   *\n   * Load the language database.\n   *\n   */\n  this.langDb = dbLang['trigram'];\n  this.unicodeMap = dbLang['trigram-unicodemap'];\n\n  this.languageType = languageType || null;\n};\n\nLanguageDetect.prototype = {\n\n  /**\n   * Returns the number of languages that this object can detect\n   *\n   * @access public\n   * @return int the number of languages\n   */\n  getLanguageCount:function () {\n    return this.getLanguages().length;\n  },\n\n  setLanguageType:function (type) {\n    return this.languageType = type;\n  },\n\n  /**\n   * Returns the list of detectable languages\n   *\n   * @access public\n   * @return object the names of the languages known to this object\n   */\n  getLanguages:function () {\n    return Object.keys(this.langDb);\n  },\n\n  /**\n   * Calculates a linear rank-order distance statistic between two sets of\n   * ranked trigrams\n   *\n   * Sums the differences in rank for each trigram. If the trigram does not\n   * appear in both, consider it a difference of $this->_threshold.\n   *\n   * This distance measure was proposed by Cavnar & Trenkle (1994). Despite\n   * its simplicity it has been shown to be highly accurate for language\n   * identification tasks.\n   *\n   * @access  private\n   * @param   arr1  the reference set of trigram ranks\n   * @param   arr2  the target set of trigram ranks\n   * @return  int   the sum of the differences between the ranks of\n   *                the two trigram sets\n   */\n  distance:function (arr1, arr2) {\n    var me = this\n      , sumdist = 0\n      , keys = Object.keys(arr2)\n      , i;\n\n    for (i = keys.length; i--;) {\n      sumdist += arr1[keys[i]] ? Math.abs(arr2[keys[i]] - arr1[keys[i]]) : me.threshold;\n    }\n\n    return sumdist;\n  },\n\n  /**\n   * Normalizes the score returned by _distance()\n   *\n   * Different if perl compatible or not\n   *\n   * @access  private\n   * @param   score       the score from _distance()\n   * @param   baseCount   the number of trigrams being considered\n   * @return  number      the normalized score\n   *\n   * @see     distance()\n   */\n  normalizeScore:function (score, baseCount) {\n    return 1 - (score / (baseCount || this.threshold) / this.threshold);\n  },\n\n  /**\n   * Detects the closeness of a sample of text to the known languages\n   *\n   * Calculates the statistical difference between the text and\n   * the trigrams for each language, normalizes the score then\n   * returns results for all languages in sorted order\n   *\n   * If perl compatible, the score is 300-0, 0 being most similar.\n   * Otherwise, it's 0-1 with 1 being most similar.\n   *\n   * The $sample text should be at least a few sentences in length;\n   * should be ascii-7 or utf8 encoded, if another and the mbstring extension\n   * is present it will try to detect and convert. However, experience has\n   * shown that mb_detect_encoding() *does not work very well* with at least\n   * some types of encoding.\n   *\n   * @access  public\n   * @param   sample  a sample of text to compare.\n   * @param   limit  if specified, return an array of the most likely\n   *                  $limit languages and their scores.\n   * @return  Array   sorted array of language scores, blank array if no\n   *                  useable text was found, or PEAR_Error if error\n   *                  with the object setup\n   *\n   * @see     distance()\n   */\n  detect:function (sample, limit) {\n    var me = this\n      , scores = [];\n\n    limit = +limit || 0;\n\n    if (sample == '' || String(sample).length < 3) return [];\n\n    var sampleObj = new Parser(sample);\n    sampleObj.setPadStart(true);\n    sampleObj.analyze();\n\n    var trigramFreqs = sampleObj.getTrigramRanks()\n      , trigramCount = Object.keys(trigramFreqs).length;\n\n    if (trigramCount == 0) return [];\n\n    var keys = [], i, lang;\n\n    if (this.useUnicodeNarrowing) {\n      var blocks = sampleObj.getUnicodeBlocks()\n        , languages = Object.keys(blocks)\n        , keysLength = languages.length;\n\n      for (i = keysLength; i--;) {\n        if (this.unicodeMap[languages[i]]) {\n          for (lang in this.unicodeMap[languages[i]]) {\n            if (!~keys.indexOf(lang)) keys.push(lang);\n          }\n        }\n      }\n    } else {\n      keys = me.getLanguages();\n    }\n\n    for (i = keys.length; i--;) {\n      var score = me.normalizeScore(me.distance(me.langDb[keys[i]], trigramFreqs), trigramCount);\n      if (score) scores.push([keys[i], score]);\n    }\n\n    // Sort the array\n    scores.sort(function (a, b) { return b[1] - a[1]; });\n    var scoresLength = scores.length;\n\n    if (!scoresLength) return [];\n\n    switch (me.languageType) {\n      case 'iso2':\n        for (i = scoresLength; i--;) {\n          scores[i][0] = ISO639.getCode2(scores[i][0]);\n        }\n        break;\n      case 'iso3':\n        for (i = scoresLength; i--;) {\n          scores[i][0] = ISO639.getCode3(scores[i][0]);\n        }\n        break;\n    }\n\n    // limit the number of returned scores\n    return limit > 0 ? scores.slice(0, limit) : scores;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-languagedetect/node_modules/languagedetect/lib/Parser.js":"var dbUnicodeBlocks = require('../data/unicode_blocks.json');\n\n/**\n * This class represents a text sample to be parsed.\n *\n * Largely inspired from the PHP Pear Package Text_LanguageDetect by Nicholas Pisarro\n * Licence: http://www.debian.org/misc/bsd.license BSD\n *\n * @author Francois-Guillaume Ribreau - @FGRibreau\n * @author Ruslan Zavackiy - @Chaoser\n *\n * @see https://github.com/FGRibreau/node-language-detect\n */\nvar Parser = module.exports = function (string) {\n  /**\n   * The size of the trigram data arrays\n   *\n   * @access   private\n   * @var      int\n   */\n  this.threshold = 300;\n\n  /**\n   * stores the trigram ranks of the sample\n   *\n   * @access  private\n   * @var     array\n   */\n  this.trigramRanks = {};\n\n  /**\n   * Whether the parser should compile trigrams\n   *\n   * @access  private\n   * @var     bool\n   */\n  this.compileTrigram = true;\n\n  this.compileUnicode = true;\n  this.unicodeSkipAscii = true;\n  this.unicodeBlocks = {};\n\n  /**\n   * Whether the trigram parser should pad the beginning of the string\n   *\n   * @access  private\n   * @var     bool\n   */\n  this.trigramPadStart = false;\n\n  this.trigram = {};\n\n  /**\n   * the piece of text being parsed\n   *\n   * @access  private\n   * @var     string\n   */\n\n  /**\n   * Constructor\n   *\n   * @access  private\n   * @param   string  string to be parsed\n   */\n  this.string = string ? string.replace(/[~!@#$%^&*()_|+\\-=?;:\",.<>\\{\\}\\[\\]\\\\\\/]/g, ' ') : '';\n};\n\nParser.prototype = {\n  /**\n   * turn on/off padding the beginning of the sample string\n   *\n   * @access  public\n   * @param   bool   true for on, false for off\n   */\n  setPadStart: function (bool) {\n    this.trigramPadStart = bool || true;\n  },\n\n  /**\n   * Returns the trigram ranks for the text sample\n   *\n   * @access  public\n   * @return  array   trigram ranks in the text sample\n   */\n  getTrigramRanks: function () {\n    return this.trigramRanks;\n  },\n\n  getBlockCount: function () {\n    return dbUnicodeBlocks.length;\n  },\n\n  getUnicodeBlocks: function () {\n    return this.unicodeBlocks;\n  },\n\n  /**\n   * Executes the parsing operation\n   *\n   * Be sure to call the set*() functions to set options and the\n   * prepare*() functions first to tell it what kind of data to compute\n   *\n   * Afterwards the get*() functions can be used to access the compiled\n   * information.\n   *\n   * @access public\n   */\n  analyze: function () {\n    var len = this.string.length\n      , byteCounter = 0\n      , a = ' ', b = ' '\n      , dropone, c;\n\n    if (this.compileUnicode) {\n      var blocksCount = dbUnicodeBlocks.length;\n    }\n\n    // trigram startup\n    if (this.compileTrigram) {\n      // initialize them as blank so the parser will skip the first two\n      // (since it skips trigrams with more than  2 contiguous spaces)\n      a = ' ';\n      b = ' ';\n\n      // kludge\n      // if it finds a valid trigram to start and the start pad option is\n      // off, then set a variable that will be used to reduce this\n      // trigram after parsing has finished\n      if (!this.trigramPadStart) {\n        a = this.string.charAt(byteCounter++).toLowerCase();\n\n        if (a != ' ') {\n          b = this.string.charAt(byteCounter).toLowerCase();\n          dropone = ' ' + a + b;\n        }\n\n        byteCounter = 0;\n        a = ' ';\n        b = ' ';\n      }\n    }\n\n    var skippedCount = 0;\n    var unicodeChars = {};\n\n    while (byteCounter < len) {\n      c = this.string.charAt(byteCounter++).toLowerCase();\n\n      // language trigram detection\n      if (this.compileTrigram) {\n        if (!(b == ' ' && (a == ' ' || c == ' '))) {\n          var abc = a + b + c;\n          this.trigram[abc] = this.trigram[abc] ? this.trigram[abc] += 1 : 1;\n        }\n\n        a = b;\n        b = c;\n      }\n\n      if (this.compileUnicode) {\n        var charCode = c.charCodeAt(0);\n\n        if (this.unicodeSkipAscii\n          && c.match(/[a-z ]/i)\n          && (charCode < 65 || charCode > 122 || (charCode > 90 && charCode < 97))\n          && c != \"'\") {\n\n          skippedCount++;\n          continue;\n        }\n\n        unicodeChars[c] = unicodeChars[c] ? unicodeChars[c] += 1 : 1;\n      }\n    }\n\n    this.unicodeBlocks = {};\n\n    if (this.compileUnicode) {\n      var keys = Object.keys(unicodeChars)\n        , keysLength = keys.length;\n\n      for (var i = keysLength; i--;) {\n        var unicode = keys[i].charCodeAt(0)\n          , count = unicodeChars[keys[i]]\n          , search = this.unicodeBlockName(unicode, blocksCount)\n          , blockName = search != -1 ? search[2] : '[Malformatted]';\n\n        this.unicodeBlocks[blockName] = this.unicodeBlocks[blockName] ? this.unicodeBlocks[blockName] += count : count;\n      }\n    }\n\n    // trigram cleanup\n    if (this.compileTrigram) {\n      // pad the end\n      if (b != ' ') {\n        var ab = a + b + ' ';\n        this.trigram[ab] = this.trigram[ab] ? this.trigram[ab] += 1 : 1;\n      }\n\n      // perl compatibility; Language::Guess does not pad the beginning\n      // kludge\n      if (typeof dropone != 'undefined' && this.trigram[dropone] == 1) {\n        delete this.trigram[dropone];\n      }\n\n      if (this.trigram && Object.keys(this.trigram).length > 0) {\n        this.trigramRanks = this.arrRank(this.trigram);\n      } else {\n        this.trigramRanks = {};\n      }\n    }\n  },\n\n  /**\n   * Sorts an array by value breaking ties alphabetically\n   *\n   * @access private\n   * @param arr the array to sort\n   */\n  bubleSort: function (arr) {\n    // should do the same as this perl statement:\n    // sort { $trigrams{$b} == $trigrams{$a} ?  $a cmp $b : $trigrams{$b} <=> $trigrams{$a} }\n\n    // needs to sort by both key and value at once\n    // using the key to break ties for the value\n\n    // converts array into an array of arrays of each key and value\n    // may be a better way of doing this\n    var combined = [];\n\n    for (var key in arr) {\n      combined.push([key, arr[key]]);\n    }\n\n    combined = combined.sort(this.sortFunc);\n\n    var replacement = {};\n\n    var length = combined.length;\n\n    for (var i = 0; i < length; i++) {\n      replacement[combined[i][0]] = combined[i][1];\n    }\n\n    return replacement;\n  },\n\n  /**\n   * Converts a set of trigrams from frequencies to ranks\n   *\n   * Thresholds (cuts off) the list at $this->_threshold\n   *\n   * @access  protected\n   * @param   arr     array of trgram\n   * @return  object  ranks of trigrams\n   */\n  arrRank: function (arr) {\n\n    // sorts alphabetically first as a standard way of breaking rank ties\n    arr = this.bubleSort(arr);\n\n    var rank = {}, i = 0;\n\n    for (var key in arr) {\n      rank[key] = i++;\n\n      // cut off at a standard threshold\n      if (i >= this.threshold) {\n        break;\n      }\n    }\n\n    return rank;\n  },\n\n  /**\n   * Sort function used by bubble sort\n   *\n   * Callback function for usort().\n   *\n   * @access   private\n   * @param    a    first param passed by usort()\n   * @param    b    second param passed by usort()\n   * @return   int  1 if $a is greater, -1 if not\n   *\n   * @see      bubleSort()\n   */\n  sortFunc: function (a, b) {\n    // each is actually a key/value pair, so that it can compare using both\n    var aKey = a[0]\n      , aValue = a[1]\n      , bKey = b[0]\n      , bValue = b[1];\n\n    // if the values are the same, break ties using the key\n    if (aValue == bValue) {\n      return aKey.localeCompare(bKey);\n    } else {\n      return aValue > bValue ? -1 : 1;\n    }\n  },\n\n  unicodeBlockName: function (unicode, blockCount) {\n    if (unicode <= dbUnicodeBlocks[0][1]) {\n      return dbUnicodeBlocks[0];\n    }\n\n    var high = blockCount ? blockCount - 1 : dbUnicodeBlocks.length\n      , low = 1\n      , mid;\n\n    while (low <= high) {\n      mid = Math.floor((low + high) / 2);\n\n      if (unicode < dbUnicodeBlocks[mid][0]) {\n        high = mid - 1;\n      } else if (unicode > dbUnicodeBlocks[mid][1]) {\n        low = mid + 1;\n      } else {\n        return dbUnicodeBlocks[mid];\n      }\n    }\n\n    return -1;\n  }\n};","/home/travis/build/npmtest/node-npmtest-languagedetect/node_modules/languagedetect/lib/ISO639.js":"var Languages = module.exports = {\n  getCode2:function (lang) {\n    return Languages.nameToCode2[String(lang).toLowerCase()] || null;\n  },\n\n  getCode3: function(lang) {\n    return Languages.nameToCode3[String(lang).toLowerCase()] || null;\n  },\n\n  getName2: function(code) {\n    return Languages.code2ToName[String(code).toLowerCase()] || null;\n  },\n\n  getName3: function(code) {\n    return Languages.code3ToName[String(code).toLowerCase()] || null;\n  },\n\n  nameToCode2:{\n    'albanian':'sq',\n    'arabic':'ar',\n    'azeri':'az',\n    'bengali':'bn',\n    'bulgarian':'bg',\n    'cebuano':null,\n    'croatian':'hr',\n    'czech':'cs',\n    'danish':'da',\n    'dutch':'nl',\n    'english':'en',\n    'estonian':'et',\n    'farsi':'fa',\n    'finnish':'fi',\n    'french':'fr',\n    'german':'de',\n    'hausa':'ha',\n    'hawaiian':null,\n    'hindi':'hi',\n    'hungarian':'hu',\n    'icelandic':'is',\n    'indonesian':'id',\n    'italian':'it',\n    'kazakh':'kk',\n    'kyrgyz':'ky',\n    'latin':'la',\n    'latvian':'lv',\n    'lithuanian':'lt',\n    'macedonian':'mk',\n    'mongolian':'mn',\n    'nepali':'ne',\n    'norwegian':'no',\n    'pashto':'ps',\n    'pidgin':null,\n    'polish':'pl',\n    'portuguese':'pt',\n    'romanian':'ro',\n    'russian':'ru',\n    'serbian':'sr',\n    'slovak':'sk',\n    'slovene':'sl',\n    'somali':'so',\n    'spanish':'es',\n    'swahili':'sw',\n    'swedish':'sv',\n    'tagalog':'tl',\n    'turkish':'tr',\n    'ukrainian':'uk',\n    'urdu':'ur',\n    'uzbek':'uz',\n    'vietnamese':'vi',\n    'welsh':'cy'\n  },\n\n  nameToCode3:{\n    'albanian':'sqi',\n    'arabic':'ara',\n    'azeri':'aze',\n    'bengali':'ben',\n    'bulgarian':'bul',\n    'cebuano':'ceb',\n    'croatian':'hrv',\n    'czech':'ces',\n    'danish':'dan',\n    'dutch':'nld',\n    'english':'eng',\n    'estonian':'est',\n    'farsi':'fas',\n    'finnish':'fin',\n    'french':'fra',\n    'german':'deu',\n    'hausa':'hau',\n    'hawaiian':'haw',\n    'hindi':'hin',\n    'hungarian':'hun',\n    'icelandic':'isl',\n    'indonesian':'ind',\n    'italian':'ita',\n    'kazakh':'kaz',\n    'kyrgyz':'kir',\n    'latin':'lat',\n    'latvian':'lav',\n    'lithuanian':'lit',\n    'macedonian':'mkd',\n    'mongolian':'mon',\n    'nepali':'nep',\n    'norwegian':'nor',\n    'pashto':'pus',\n    'pidgin':'crp',\n    'polish':'pol',\n    'portuguese':'por',\n    'romanian':'ron',\n    'russian':'rus',\n    'serbian':'srp',\n    'slovak':'slk',\n    'slovene':'slv',\n    'somali':'som',\n    'spanish':'spa',\n    'swahili':'swa',\n    'swedish':'swe',\n    'tagalog':'tgl',\n    'turkish':'tur',\n    'ukrainian':'ukr',\n    'urdu':'urd',\n    'uzbek':'uzb',\n    'vietnamese':'vie',\n    'welsh':'cym'\n  },\n  code2ToName:{\n    'ar':'arabic',\n    'az':'azeri',\n    'bg':'bulgarian',\n    'bn':'bengali',\n    'cs':'czech',\n    'cy':'welsh',\n    'da':'danish',\n    'de':'german',\n    'en':'english',\n    'es':'spanish',\n    'et':'estonian',\n    'fa':'farsi',\n    'fi':'finnish',\n    'fr':'french',\n    'ha':'hausa',\n    'hi':'hindi',\n    'hr':'croatian',\n    'hu':'hungarian',\n    'id':'indonesian',\n    'is':'icelandic',\n    'it':'italian',\n    'kk':'kazakh',\n    'ky':'kyrgyz',\n    'la':'latin',\n    'lt':'lithuanian',\n    'lv':'latvian',\n    'mk':'macedonian',\n    'mn':'mongolian',\n    'ne':'nepali',\n    'nl':'dutch',\n    'no':'norwegian',\n    'pl':'polish',\n    'ps':'pashto',\n    'pt':'portuguese',\n    'ro':'romanian',\n    'ru':'russian',\n    'sk':'slovak',\n    'sl':'slovene',\n    'so':'somali',\n    'sq':'albanian',\n    'sr':'serbian',\n    'sv':'swedish',\n    'sw':'swahili',\n    'tl':'tagalog',\n    'tr':'turkish',\n    'uk':'ukrainian',\n    'ur':'urdu',\n    'uz':'uzbek',\n    'vi':'vietnamese'\n  },\n\n  code3ToName:{\n    'ara':'arabic',\n    'aze':'azeri',\n    'ben':'bengali',\n    'bul':'bulgarian',\n    'ceb':'cebuano',\n    'ces':'czech',\n    'crp':'pidgin',\n    'cym':'welsh',\n    'dan':'danish',\n    'deu':'german',\n    'eng':'english',\n    'est':'estonian',\n    'fas':'farsi',\n    'fin':'finnish',\n    'fra':'french',\n    'hau':'hausa',\n    'haw':'hawaiian',\n    'hin':'hindi',\n    'hrv':'croatian',\n    'hun':'hungarian',\n    'ind':'indonesian',\n    'isl':'icelandic',\n    'ita':'italian',\n    'kaz':'kazakh',\n    'kir':'kyrgyz',\n    'lat':'latin',\n    'lav':'latvian',\n    'lit':'lithuanian',\n    'mkd':'macedonian',\n    'mon':'mongolian',\n    'nep':'nepali',\n    'nld':'dutch',\n    'nor':'norwegian',\n    'pol':'polish',\n    'por':'portuguese',\n    'pus':'pashto',\n    'rom':'romanian',\n    'rus':'russian',\n    'slk':'slovak',\n    'slv':'slovene',\n    'som':'somali',\n    'spa':'spanish',\n    'sqi':'albanian',\n    'srp':'serbian',\n    'swa':'swahili',\n    'swe':'swedish',\n    'tgl':'tagalog',\n    'tur':'turkish',\n    'ukr':'ukrainian',\n    'urd':'urdu',\n    'uzb':'uzbek',\n    'vie':'vietnamese'\n  }\n};","/home/travis/build/npmtest/node-npmtest-languagedetect/node_modules/languagedetect/benchmark/benchmark.js":"var data = JSON.parse(require('fs').readFileSync('./data/text.js', 'utf-8'));\nvar LanguageDetect = require('../index');\n\nvar l = new LanguageDetect();\n\nvar ok = 0;\n\nvar start = Date.now();\nfor (var i in data) {\n  var text = data[i];\n  var r = l.detect(text.text);\n  if (!r.length) continue;\n\n  if (r[0][1] > 0.2) {\n    ok++;\n  }\n}\nvar end = Date.now();\n\nvar time = Math.round((end-start))/1000;\n\nconsole.log(data.length + \" items processed in \" + time + \" secs (\" + ok + \" with a score > 0.2)\");\n"}